#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

// Layer definitions
#define DEFAULT 0
#define KEYPAD  1
#define FN      2
#define MOD     3

// Shift key hold-tap macro
#define LSH(k)  &hm LSHFT k
#define RSH(k)  &hm RSHFT k

// Control key hold-tap macro
#define LCT(k)  &hm LCTRL k
#define RCT(k)  &hm RCTRL k

// Alt key hold-tap macro
#define LAL(k)  &hm LALT k
#define RAL(k)  &hm RALT k

// GUI key hold-tap macro
#define LGU(k)  &hm LGUI k
#define RGU(k)  &hm RGUI k

// Layer FN hold-tap macro
#define FNK(k)  &lt FN k

// Layer KEYPAD hold-tap macro
#define KYP(k)  &lt KEYPAD k

// Bluetooth macro to tidy up the layout
#define BT(k)   &bt BT_SEL k

// backlight / led macros
#define T_BL    &bl BL_TOG      // toggle backlight
#define T_LED   &rgb_ug RGB_TOG // toggle status LEDs
#define BL_UP   &bl BL_INC      // backlight level increase
#define BL_DN   &bl BL_DEC      // backlight level decrease

// Keypad shorteners
#define KP_DIV  KP_DIVIDE
#define KP_MULT KP_MULTIPLY

// Misc macros to tidy up the layout
#define M_BOOT  &bootloader
#define M_CAPS  &caps_word
#define M_CHCK  &rgb_ug RGB_MEFS_CMD 5   // battery level check

/ {
    behaviors {
      #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";
        label = "macro_version";
        #binding-cells = <0>;
        bindings = <&kp RET>;
      };
      #endif

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };
    };


    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
&kp ESC    &kp N1    &kp N2    &kp N3    &kp N4  &kp N5   &tog KEYPAD                                                       &mo MOD &kp N6     &kp N7      &kp N8       &kp N9      &kp N0       &kp BSPC 
&kp TAB    &kp Q     &kp W     &kp E     &kp R   &kp T    &kp N6                                                            &none   &kp Y      &kp U       &kp I        &kp O       &kp P        &kp BSLH
&kp LCTRL  &kp A     &kp S     &kp D     &kp F   &kp G    M_CAPS     &kp LGUI    &kp LCTRL   &kp INS    &kp DEL             &none   &kp H      &kp J       &kp K        &kp L       &kp SEMI     &kp SQT
&kp LSHFT  &kp Z     &kp X     &kp C     &kp V   &kp B                           &kp PG_UP   &kp HOME                               &kp N      &kp M       RCT(COMMA)   RAL(DOT)    &kp FSLH     &kp RSHFT
&kp EQUAL  &kp GRAVE &kp RIGHT &kp DOWN  LAL(UP)          FNK(BSPC)  KYP(SPACE)  FNK(PG_DN)  FNK(END)   FNK(ENTER) &kp SPACE                   &kp EQUAL   &kp LBKT     &kp RBKT    &kp BSLH     &kp MINUS
            >;
        };

        layer_keypad {
            bindings = <
&trans     &trans    &trans    &trans    &trans  &trans   &tog KEYPAD                                                      &none   &kp KP_NLCK &kp KP_NLCK &kp KP_DIV   &kp KP_MULT &kp KP_MINUS &trans
&trans     &trans    &trans    &trans    &trans  &trans   &trans                                                           &none   &none       &kp KP_N7   &kp KP_N8    &kp KP_N9   &kp KP_PLUS  &trans
&trans     &trans    &trans    &trans    &trans  &trans   &trans    &trans       &trans      &trans     &trans             &none   &none       &kp KP_N4   &kp KP_N5    &kp KP_N6   &kp KP_PLUS  &trans
&trans     &trans    &trans    &trans    &trans  &trans                          &trans      &trans                                &none       &kp KP_N1   &kp KP_N2    &kp KP_N3   &kp ENTER    &trans
&trans     &trans    &trans    &trans    &trans           &trans    &trans       &trans      &trans     &kp ENTER  &kp KP_N0                   &kp KP_N0   &kp KP_N0    &kp KP_DOT  &kp ENTER    &trans
            >;
        };

        layer_fn {
            bindings = <
&none      &kp F2    &kp F3    &kp F4    &kp F5    &kp F6   &none                                                          &none   &kp F7     &kp F8     &kp F9       &kp F10     &kp F11      &kp DEL
&none      &none     &kp LT    &kp GT    &kp EXCL  &none    &none                                                          &none   &none      &none      &none        &none       &none        &none
&none      &none     &kp MINUS &kp PLUS  &kp EQUAL &none    &none     &none      &none       &none      &none              &none   &kp LEFT   &kp DOWN   &kp UP       &kp RIGHT   &none        &kp ENTER
&none      &none     &none     &none     &kp TILDE &none                         &none       &none                                 &none      &kp PGUP   &kp UP       &kp PGDN    &none        &none 
&kp F1     &none     &none     &none     &kp DOWN           &kp DEL   &trans     &none       &none      &kp ENTER  &kp SPACE                  &kp LEFT   &kp DOWN     &kp RIGHT   &none        &kp F12
            >;
        };

        layer_mod {
            bindings = <
&none      BT(0)     BT(1)     BT(2)     BT(3)  BT(4)     &none                                                            &none   &none      &none      &none        &none      &none      &none
&none      &none     &none     &none     &none  &none     M_BOOT                                                           M_BOOT  &none      &none      &none        &none      &none      &none
&none      &none     &none     &none     &none  &none     &none     &bt BT_CLR &none       &none      &none                M_CHCK  &none      &none      &none        &none      &none      &none
&none      &none     &none     &none     &none  &none                          &none       &none                                   &none      &none      &none        &none      &none      &none
&none      &none     &none     BL_DN     BL_UP            &none     &none      &none       &none      T_BL       T_LED                        &none      &none        &none      &none      &none
            >;
        };
    };
};
